buildscript {
    repositories {
        jcenter()
        google()
        maven { url 'https://maven.fabric.io/public' }

    }
    dependencies {
        classpath "com.android.tools.build:gradle:3.0.1"
        classpath 'org.robolectric:robolectric-gradle-plugin:1.1.0'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.1'
        classpath 'io.fabric.tools:gradle:1.+'
    }
}

repositories {
    jcenter()
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://maven.fabric.io/public' }
    mavenLocal()
}

apply plugin: 'com.android.application'
//apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'

apply plugin: 'io.fabric'

// Local repo
repositories {
    flatDir {
        dirs '../lib/opensrp-device/opensrp-deviceinterface/build/outputs/aar'
    }
}

android {

    compileSdkVersion 27
    buildToolsVersion "27.0.1"

    defaultConfig {
        applicationId "org.smartregister.bidan_cloudant"
        minSdkVersion 18
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
//        multiDexEnabled true

        buildConfigField "long", "MAX_SERVER_TIME_DIFFERENCE", "1800000l"
        buildConfigField "boolean", "TIME_CHECK", "false"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    dexOptions {
        preDexLibraries = false
        jumboMode true
        javaMaxHeapSize "4g"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "int", "DATABASE_VERSION", '1'

        }
        debug {
            resValue "string", 'opensrp_url', '"http://118.91.130.18:9090/opensrp"'
            buildConfigField "int", "DATABASE_VERSION", '1'
            buildConfigField "boolean", "SYNC_WAIT", 'false'
            buildConfigField "boolean", "UNIQUE_ID", 'false'
            testCoverageEnabled true

        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'LICENSE.txt'
    }

    lintOptions {
        checkReleaseBuilds false
        disable 'MissingTranslation'
        checkReleaseBuilds false
        abortOnError false
    }
}

dependencies {
    //    compile('org.smartregister:opensrp-client-core:1.1.1-SNAPSHOT@aar') {
    //        transitive = true
    //        exclude group: 'com.github.bmelnychuk', module: 'atv'
    //        exclude group: 'com.google.guava', module: 'guava'
    //    }
    implementation('org.smartregister:opensrp-client-enketo:1.0.1-SNAPSHOT@aar') {
        exclude group: 'jacoco'
        transitive = true
    }
    implementation fileTree(include: ['commons-validator-1.6.jar'], dir: 'libs')
    implementation 'com.google.guava:guava:23.6-android'
    implementation('com.android.support:design:27.1.0') {
        exclude group: 'com.android.support', module: 'recyclerview-v7'

    }
    implementation files('libs/FlurryAnalytics-6.0.0.jar')
    testImplementation 'junit:junit:4.12'
    testImplementation('org.robolectric:robolectric:3.4') {

        exclude group: 'com.google.guava', module: 'guava'
        exclude group: 'org.apache.maven', module: 'maven-model'
        exclude group: 'org.apache.maven', module: 'maven-ant-tasks'
        exclude group: 'com.android.support'
        exclude group: 'com.thoughtworks.xstream', module: '0cxstream'
    }
    testImplementation('org.robolectric:shadows-multidex:3.4-rc2') {
        exclude group: 'com.google.guava', module: 'guava'
    }
    testImplementation 'org.apache.maven:maven-ant-tasks:2.1.3'
    //    compile project(':lib:bpm')
    //    compile(name: 'opensrp-deviceinterface-debug', ext: 'aar')
    implementation('com.crashlytics.sdk.android:crashlytics:2.8.0@aar') {
        transitive = true
    }
    implementation 'net.zetetic:android-database-sqlcipher:3.5.9@aar'
    compile 'com.android.support:multidex:1.0.1'

    // PowerMock
    def powerMockVersion = '1.7.3'
    testImplementation "org.powermock:powermock-api-mockito2:$powerMockVersion"
    testImplementation "org.powermock:powermock-module-junit4:$powerMockVersion"
    testImplementation "org.powermock:powermock-module-junit4-rule:$powerMockVersion"
    testImplementation "org.powermock:powermock-module-junit4-rule-agent:$powerMockVersion"
    testImplementation("org.powermock:powermock-classloading-xstream:$powerMockVersion") {

        exclude group: 'com.thoughtworks.xstream', module: 'xstream'
    }
    //    compile project(':lib:opensrp-device:opensrp-deviceinterface')
    implementation project(':client-core')
    implementation files('../client-core/libs/opensrp-api-0.1-SNAPSHOT.jar')
    implementation files('../client-core/libs/cloudant-sync-datastore-core-1.1.0.jar')
    implementation files('../client-core/libs/cloudant-sync-datastore-android-1.1.0.jar')
    implementation 'org.mozilla:rhino:1.7R4'
    annotationProcessor 'com.jakewharton:butterknife:7.0.1'
    implementation 'com.jakewharton:butterknife:7.0.1'
    implementation 'org.ei.drishti:drishti-interface:0.1-SNAPSHOT'

    implementation 'com.cloudant:cloudant-http:2.7.0'
    implementation "org.apache.httpcomponents:httpmime:4.2.3"
    //noinspection DuplicatePlatformClasses
    implementation "org.apache.httpcomponents:httpclient:4.2.3"
    //noinspection DuplicatePlatformClasses
    implementation "org.json:json:20180130"
    implementation "com.google.code.gson:gson:2.0"

}


task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    getReports().getXml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/merged.xml"))
    getReports().getHtml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/html"))

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*', '**/*$ViewBinder*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}

coveralls {
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/merged.xml"
}

tasks.coveralls {
    dependsOn 'connectedAndroidTest'
    onlyIf { System.env.'CI' }
}